<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Raycasting Demo</title>
    <style>
        body {
            margin: 0;
            overflow: hidden; /* Prevent scrollbars */
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            background-color: #222; /* Dark background */
            font-family: 'Inter', sans-serif; /* Use Inter font */
            color: #eee;
        }

        #game-container {
            display: flex;
            flex-direction: column;
            align-items: center;
            background-color: #333;
            padding: 20px;
            border-radius: 15px; /* Rounded corners */
            box-shadow: 0 0 20px rgba(0, 0, 0, 0.5);
            max-width: 90vw; /* Responsive width */
            max-height: 90vh; /* Responsive height */
            box-sizing: border-box; /* Include padding in width/height */
        }

        canvas {
            background-color: #000; /* Canvas background */
            display: block;
            border: 2px solid #555;
            border-radius: 8px; /* Rounded corners for canvas */
            width: 100%; /* Make canvas fluid */
            height: auto; /* Maintain aspect ratio */
            max-width: 800px; /* Max width for desktop */
            max-height: 600px; /* Max height for desktop */
        }

        #controls {
            margin-top: 15px;
            text-align: center;
            font-size: 0.9em;
            line-height: 1.4;
        }

        #controls p {
            margin: 5px 0;
        }
    </style>
</head>
<body>
    <div id="game-container">
        <canvas id="gameCanvas"></canvas>
        <div id="controls">
            <p><strong>Controls:</strong></p>
            <p><strong>W</strong> - Move Forward</p>
            <p><strong>S</strong> - Move Backward</p>
            <p><strong>A</strong> - Turn Left</p>
            <p><strong>D</strong> - Turn Right</p>
        </div>
    </div>

    <script>
        // Get the canvas element and its 2D rendering context
        const canvas = document.getElementById('gameCanvas');
        const ctx = canvas.getContext('2d');

        // Game configuration
        const screenWidth = 640; // Resolution width for raycasting calculations
        const screenHeight = 480; // Resolution height for raycasting calculations
        const mapWidth = 24; // Width of the game map
        const mapHeight = 24; // Height of the game map
        const wallHeightScale = 1.0; // Adjusts the perceived height of walls

        // Player properties
        let playerX = 22.0; // Player's starting X position
        let playerY = 11.5; // Player's starting Y position
        let dirX = -1.0; // Player's initial direction vector X
        let dirY = 0.0; // Player's initial direction vector Y
        let planeX = 0.0; // Camera plane vector X (perpendicular to direction, defines FOV)
        let planeY = 0.66; // Camera plane vector Y (0.66 for 66 degree FOV)
        const moveSpeed = 0.1; // Player movement speed
        const rotSpeed = 0.05; // Player rotation speed

        // Game map (1 = wall, 0 = empty space)
        // This map is designed to have different colored walls for visual distinction
        const worldMap = [
            [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
            [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
            [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
            [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
            [1,0,0,0,0,0,2,2,2,2,2,0,0,0,0,3,0,3,0,3,0,0,0,1],
            [1,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,1],
            [1,0,0,0,0,0,2,0,0,0,2,0,0,0,0,3,0,0,0,3,0,0,0,1],
            [1,0,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,1],
            [1,0,0,0,0,0,2,2,0,2,2,0,0,0,0,3,0,3,0,3,0,0,0,1],
            [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
            [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
            [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
            [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
            [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
            [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
            [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
            [1,4,4,4,4,4,4,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
            [1,4,0,4,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
            [1,4,0,0,0,0,5,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
            [1,4,0,4,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
            [1,4,0,4,4,4,4,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
            [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
            [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
            [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]
        ];

        // Key states
        const keys = {};
        window.addEventListener('keydown', (e) => { keys[e.key.toLowerCase()] = true; });
        window.addEventListener('keyup', (e) => { keys[e.key.toLowerCase()] = false; });

        /**
         * Resizes the canvas to fit the container and maintains aspect ratio.
         */
        function resizeCanvas() {
            const container = document.getElementById('game-container');
            const containerWidth = container.clientWidth - 40; // Account for padding
            const containerHeight = container.clientHeight - 40 - document.getElementById('controls').offsetHeight;

            // Calculate target dimensions based on aspect ratio
            let targetWidth = containerWidth;
            let targetHeight = containerWidth * (screenHeight / screenWidth);

            if (targetHeight > containerHeight) {
                targetHeight = containerHeight;
                targetWidth = containerHeight * (screenWidth / screenHeight);
            }

            canvas.style.width = `${targetWidth}px`;
            canvas.style.height = `${targetHeight}px`;

            // Set internal canvas resolution (important for drawing quality)
            canvas.width = screenWidth;
            canvas.height = screenHeight;
        }

        // Initial resize and add event listener for window resize
        window.addEventListener('resize', resizeCanvas);
        resizeCanvas(); // Call once to set initial size

        /**
         * Main game loop function.
         * This function is responsible for updating game state and rendering the scene.
         */
        function gameLoop() {
            update(); // Update player position and direction
            draw();   // Render the scene
            requestAnimationFrame(gameLoop); // Request next frame
        }

        /**
         * Updates the player's position and direction based on keyboard input.
         */
        function update() {
            // Move forward
            if (keys['w']) {
                const newPlayerX = playerX + dirX * moveSpeed;
                const newPlayerY = playerY + dirY * moveSpeed;
                // Check for collision before moving
                if (worldMap[Math.floor(newPlayerX)][Math.floor(playerY)] === 0) playerX = newPlayerX;
                if (worldMap[Math.floor(playerX)][Math.floor(newPlayerY)] === 0) playerY = newPlayerY;
            }
            // Move backward
            if (keys['s']) {
                const newPlayerX = playerX - dirX * moveSpeed;
                const newPlayerY = playerY - dirY * moveSpeed;
                // Check for collision before moving
                if (worldMap[Math.floor(newPlayerX)][Math.floor(playerY)] === 0) playerX = newPlayerX;
                if (worldMap[Math.floor(playerX)][Math.floor(newPlayerY)] === 0) playerY = newPlayerY;
            }
            // Turn right
            if (keys['d']) {
                // Rotate player direction vector
                const oldDirX = dirX;
                dirX = dirX * Math.cos(-rotSpeed) - dirY * Math.sin(-rotSpeed);
                dirY = oldDirX * Math.sin(-rotSpeed) + dirY * Math.cos(-rotSpeed);
                // Rotate camera plane vector
                const oldPlaneX = planeX;
                planeX = planeX * Math.cos(-rotSpeed) - planeY * Math.sin(-rotSpeed);
                planeY = oldPlaneX * Math.sin(-rotSpeed) + planeY * Math.cos(-rotSpeed);
            }
            // Turn left
            if (keys['a']) {
                // Rotate player direction vector
                const oldDirX = dirX;
                dirX = dirX * Math.cos(rotSpeed) - dirY * Math.sin(rotSpeed);
                dirY = oldDirX * Math.sin(rotSpeed) + dirY * Math.cos(rotSpeed);
                // Rotate camera plane vector
                const oldPlaneX = planeX;
                planeX = planeX * Math.cos(rotSpeed) - planeY * Math.sin(rotSpeed);
                planeY = oldPlaneX * Math.sin(rotSpeed) + planeY * Math.cos(rotSpeed);
            }
        }

        /**
         * Draws the entire scene using the raycasting algorithm.
         */
        function draw() {
            // Clear the entire canvas
            ctx.clearRect(0, 0, screenWidth, screenHeight);

            // Draw ceiling (top half of the screen)
            ctx.fillStyle = '#87CEEB'; // Sky blue
            ctx.fillRect(0, 0, screenWidth, screenHeight / 2);

            // Draw floor (bottom half of the screen)
            ctx.fillStyle = '#666666'; // Dark grey
            ctx.fillRect(0, screenHeight / 2, screenWidth, screenHeight / 2);

            // Loop through each vertical strip (column) of the screen
            for (let x = 0; x < screenWidth; x++) {
                // Calculate ray position and direction
                const cameraX = 2 * x / screenWidth - 1; // X-coordinate on camera plane (-1 to 1)
                const rayDirX = dirX + planeX * cameraX;
                const rayDirY = dirY + planeY * cameraX;

                // Which box of the map we're in
                let mapX = Math.floor(playerX);
                let mapY = Math.floor(playerY);

                // Length of ray from current position to next x or y-side
                let sideDistX;
                let sideDistY;

                // Length of ray from one x or y-side to the next x or y-side
                const deltaDistX = Math.abs(1 / rayDirX);
                const deltaDistY = Math.abs(1 / rayDirY);

                // What direction to step in x or y-direction (+1 or -1)
                let stepX;
                let stepY;

                let hit = 0; // Was there a wall hit?
                let side; // Was a North/South wall (0) or East/West wall (1) hit?

                // Calculate step and initial sideDist
                if (rayDirX < 0) {
                    stepX = -1;
                    sideDistX = (playerX - mapX) * deltaDistX;
                } else {
                    stepX = 1;
                    sideDistX = (mapX + 1.0 - playerX) * deltaDistX;
                }
                if (rayDirY < 0) {
                    stepY = -1;
                    sideDistY = (playerY - mapY) * deltaDistY;
                } else {
                    stepY = 1;
                    sideDistY = (mapY + 1.0 - playerY) * deltaDistY;
                }

                // Perform DDA (Digital Differential Analysis)
                while (hit === 0) {
                    // Jump to next map square, either in x-direction, or in y-direction
                    if (sideDistX < sideDistY) {
                        sideDistX += deltaDistX;
                        mapX += stepX;
                        side = 0; // Hit a vertical wall (North/South facing)
                    } else {
                        sideDistY += deltaDistY;
                        mapY += stepY;
                        side = 1; // Hit a horizontal wall (East/West facing)
                    }
                    // Check if ray has hit a wall (map value > 0)
                    if (worldMap[mapX][mapY] > 0) {
                        hit = 1;
                    }
                }

                // Calculate distance projected on camera direction (Euclidean distance would give fish-eye effect)
                let perpWallDist;
                if (side === 0) {
                    perpWallDist = (mapX - playerX + (1 - stepX) / 2) / rayDirX;
                } else {
                    perpWallDist = (mapY - playerY + (1 - stepY) / 2) / rayDirY;
                }

                // Calculate height of line to draw on screen
                let lineHeight = Math.floor(screenHeight / perpWallDist) * wallHeightScale;

                // Calculate lowest and highest pixel to fill current stripe
                let drawStart = -lineHeight / 2 + screenHeight / 2;
                if (drawStart < 0) drawStart = 0;
                let drawEnd = lineHeight / 2 + screenHeight / 2;
                if (drawEnd >= screenHeight) drawEnd = screenHeight - 1;

                // Choose wall color based on map value and side hit
                let color;
                switch (worldMap[mapX][mapY]) {
                    case 1: color = '#FF0000'; break; // Red wall
                    case 2: color = '#00FF00'; break; // Green wall
                    case 3: color = '#0000FF'; break; // Blue wall
                    case 4: color = '#FFFF00'; break; // Yellow wall
                    case 5: color = '#FF00FF'; break; // Magenta wall
                    default: color = '#FFFFFF'; break; // White (shouldn't happen with current map)
                }

                // Give different shades for vertical and horizontal walls
                if (side === 1) { // East/West walls (horizontal lines on map)
                    // Make it a bit darker
                    color = darkenColor(color, 0.5); // Darken by 50%
                }

                // Draw the vertical strip for the wall
                ctx.fillStyle = color;
                ctx.fillRect(x, drawStart, 1, drawEnd - drawStart);
            }
        }

        /**
         * Darkens a given hex color by a certain percentage.
         * @param {string} hexColor - The color in hex format (e.g., '#RRGGBB').
         * @param {number} percent - The percentage to darken (0.0 to 1.0).
         * @returns {string} The darkened color in hex format.
         */
        function darkenColor(hexColor, percent) {
            let r = parseInt(hexColor.substring(1, 3), 16);
            let g = parseInt(hexColor.substring(3, 5), 16);
            let b = parseInt(hexColor.substring(5, 7), 16);

            r = Math.floor(r * (1 - percent));
            g = Math.floor(g * (1 - percent));
            b = Math.floor(b * (1 - percent));

            return '#' +
                   ('00' + r.toString(16)).slice(-2) +
                   ('00' + g.toString(16)).slice(-2) +
                   ('00' + b.toString(16)).slice(-2);
        }

        // Start the game loop when the window loads
        window.onload = function() {
            gameLoop();
        };
    </script>
</body>
</html>
